stages:
 - build
 - test
 - deploy
 - codeOwners_Permissions

before_script:
 - export SIMPATH=/cvmfs/nica.jinr.ru/$OS_TYPE/fairsoft/mpd
 - export FAIRROOTPATH=/cvmfs/nica.jinr.ru/$OS_TYPE/fairroot/mpd
 - sed -i "s/\/opt\/fairsoft\/install/\/cvmfs\/nica.jinr.ru\/$OS_TYPE\/fairsoft\/mpd/g" SetEnv.sh
 - sed -i "s/\/opt\/fairroot\/install/\/cvmfs\/nica.jinr.ru\/$OS_TYPE\/fairroot\/mpd/g" SetEnv.sh
 - source ./SetEnv.sh

variables:
 GIT_SUBMODULE_STRATEGY: recursive
 GREEN: '\033[1;32m'
 RED: '\033[1;31m'
 NC: '\033[0m'

.only-default: &only-default
  only:
    - merge_requests
    - dev
    - tags

.build_template: &build
  image: git.jinr.ru:5005/nica/docker-images/$OS_TYPE/base:latest
  stage: build
  tags:
    - docker
    - cvmfs
  artifacts:
    paths:
      - build
  script:
    - test $OS_TYPE = "centos7" && source /opt/rh/devtoolset-7/enable
    - mkdir build && cd build && cmake "$CI_PROJECT_DIR"
    - make -j 5
  allow_failure: false
  <<: *only-default

build:centos:
  variables:
    OS_TYPE: "centos7"
  <<: *build

build:ubuntu:
  variables:
    OS_TYPE: "ubuntu"
  <<: *build

.test_build_template: &build_tests
  image: git.jinr.ru:5005/nica/docker-images/$OS_TYPE/base:latest
  stage: test
  tags:
    - docker
    - cvmfs
  artifacts:
    when: always
    paths:
      - macro/mpd/evetest.root
    reports:
      junit: $REPORT_NAME.xml
  script:
      - scripts/run_build_tests.sh -t old -r $REPORT_NAME
      - (if grep -q "failure" $REPORT_NAME.xml; then $(exit -1); else $(exit 0); fi);
  retry: 1      # retry script if it failed (sometimes it fails due to some unexpected particle)
  allow_failure: false
  <<: *only-default

build_tests:centos:
  needs: ["build:centos"]
  variables:
    OS_TYPE: "centos7"
    REPORT_NAME: report_centos
  dependencies:
    - build:centos
  <<: *build_tests

build_tests:ubuntu:
  needs: ["build:ubuntu"]
  variables:
    OS_TYPE: "ubuntu"
    REPORT_NAME: "report_ubuntu"
  dependencies:
    - build:ubuntu
  <<: *build_tests

# .deploy_template: &deploy
#   stage: deploy
#   before_script:
#     - echo "Skipping global before_script"
#   script:
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add /dev/stdin > /dev/null
#     - mkdir -p ~/.ssh && 
#     - chmod 700 ~/.ssh
#     - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#     - rm -rf /cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/$CI_COMMIT_REF_NAME
#     - rm -rf build
#     - mkdir build
#     - cd build
#     - source /opt/rh/devtoolset-7/enable
#     - sed -i "s/\/opt\/fairsoft\/install/\/cvmfs\/nica.jinr.ru\/$CI_ENVIRONMENT_NAME\/fairsoft\/apr21p1/g" ../SetEnv.sh
#     - sed -i "s/\/opt\/fairroot\/install/\/cvmfs\/nica.jinr.ru\/$CI_ENVIRONMENT_NAME\/fairroot\/v18.6.4/g" ../SetEnv.sh
#     - source ../SetEnv.sh
#     - echo "/cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/$CI_COMMIT_REF_NAME"
#     - cmake -DCMAKE_INSTALL_PREFIX=/cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/$CI_COMMIT_REF_NAME ..
#     - make -j 5
#     - make install
#     - ssh $STRATUM_0 "sudo cvmfs_server transaction nica.jinr.ru"
#     - rsync --filter='-p .cvmfscatalog' --filter='-p .cvmfsautocatalog' -a --delete /cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/$CI_COMMIT_REF_NAME $STRATUM_0:/cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/
#     - ssh $STRATUM_0 "sudo cvmfs_server publish nica.jinr.ru"
#     - ssh-agent -k
#   only:
#     - tags
#     - dev
#   allow_failure: false

.deploy_template: &deploy
  stage: deploy
  before_script:
    - echo "Skipping global before_script"
  script:
    - scripts/trigger_nicadist.sh          # new deployment via nicabuild
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add /dev/stdin > /dev/null
    - mkdir -p ~/.ssh && 
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - rm -rf /cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/$CI_COMMIT_REF_NAME
    - rm -rf build
    - mkdir build
    - cd build
    - source /opt/rh/devtoolset-7/enable
    - sed -i "s/\/opt\/fairsoft\/install/\/cvmfs\/nica.jinr.ru\/$CI_ENVIRONMENT_NAME\/fairsoft\/apr21p1/g" ../SetEnv.sh
    - sed -i "s/\/opt\/fairroot\/install/\/cvmfs\/nica.jinr.ru\/$CI_ENVIRONMENT_NAME\/fairroot\/v18.6.4/g" ../SetEnv.sh
    - source ../SetEnv.sh
    - echo "/cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/$CI_COMMIT_REF_NAME"
    - cmake -DCMAKE_INSTALL_PREFIX=/cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/$CI_COMMIT_REF_NAME ..
    - make -j 5
    - make install
    - ssh $STRATUM_0 "sudo cvmfs_server transaction nica.jinr.ru"
    - rsync --filter='-p .cvmfscatalog' --filter='-p .cvmfsautocatalog' -a --delete /cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/$CI_COMMIT_REF_NAME $STRATUM_0:/cvmfs/nica.jinr.ru/$CI_ENVIRONMENT_NAME/mpdroot/
    - ssh $STRATUM_0 "sudo cvmfs_server publish nica.jinr.ru"
    - ssh-agent -k
  only:
    - tags
    - dev
  allow_failure: false

deploy:centos7:
  image: git.jinr.ru:5005/nica/docker-images/centos7/fair:latest
  environment:
    name: centos7
  tags:
    - docker
    - no-cvmfs
  <<: *deploy

codeOwners:
    image: registry.gitlab.com/ndmspc/user/c7:alibuild-dev
    stage: codeOwners_Permissions
    dependencies: []
    tags:
      - cvmfs
    before_script:
      - source /etc/bashrc
    only:
        refs:
            - merge_requests
        variables:
            - $CI_MERGE_REQUEST_PROJECT_PATH == "nica/mpdroot" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"
    script:
        - module add Clang/v13.0.0-1
        - scripts/inform_codeowners.sh
        - scripts/check_clangFormatting.sh

check_permissions:
  image: git.jinr.ru:5005/nica/docker-images/centos7/base:latest
  dependencies: []
  variables:
    OS_TYPE: "centos7"
    PERMISSIONS_MESSAGE_FAILURE: "Permissions check: ${RED}FAILED${NC}. You don't have permission to change some files, please contact your project maintainers."
    PERMISSIONS_MESSAGE_SUCCESS: "Permissions check: ${GREEN}PASSED${NC}."
  before_script:
    - echo "Skipping global before_script"
  tags:
    - docker
  stage: codeOwners_Permissions
  script:
    - >
      if git diff HEAD~ --name-only|grep .gitlab-ci.yml; then
        if grep -q $GITLAB_USER_LOGIN <<< $MAINTAINERS; then echo -e $PERMISSIONS_MESSAGE_SUCCESS $(exit 0); else echo -e $PERMISSIONS_MESSAGE_FAILURE; $(exit -1); fi
      fi;
  allow_failure: false
  <<: *only-default

# nicadist images and execution of new pipelines 
# cannot place into separate .yml file, due to ongoing mutation of Gitlab parsing bug 5078
.build_nica_template: &build_nica
  image: registry.gitlab.com/ndmspc/user/$OS_TYPE:alibuild-dev
  stage: build
  before_script:
    - source /etc/bashrc
    - export NPROC=$(cat /proc/cpuinfo | grep processor | wc -l)
  script:
    - export MPDROOT=$(readlink -m $OS_TYPE/mpdroot)
    - module add mpddev/latest
    - mkdir build && cd build && cmake ..
    - make install -j $NPROC
  artifacts:
    paths:
      - $OS_TYPE/mpdroot/
    expire_in: 2h
  tags:
    - cvmfs
  only:
    - merge_requests
  allow_failure: true
  #temporary hack to give priority for old build jobs, as they take longer
  when: delayed
  start_in: 10 seconds
  <<: *only-default

build_nica:c7:
  variables:
    OS_TYPE: "c7"
  <<: *build_nica

build_nica:c8:
  variables:
    OS_TYPE: "c8"
  <<: *build_nica

.test_build_nica_template: &build_tests_nica
  image: registry.gitlab.com/ndmspc/user/$OS_TYPE:alibuild-dev
  stage: test
  before_script:
    - source /etc/bashrc
  script:
    - module add mpddev/latest
    - export MPDROOT=$(readlink -m $OS_TYPE/mpdroot)
    - source $MPDROOT/etc/env.sh
    - $CI_PROJECT_DIR/scripts/run_build_tests.sh -r $REPORT_NAME
    - (if grep -q "failure" $REPORT_NAME.xml; then $(exit -1); else $(exit 0); fi);
  tags:
    - cvmfs
  only:
    - merge_requests
  artifacts:
    when: always
    reports:
      junit: $REPORT_NAME.xml
  allow_failure: true
  <<: *only-default

build_tests_nica:c7:
  variables:
    OS_TYPE: "c7"
    REPORT_NAME: "report_c7"
  needs: ["build_nica:c7"]
  dependencies:
    - build_nica:c7
  retry: 1       # retry script if it failed (sometimes if fails due to some unexpected particle). Maximum 2 retries.
  <<: *build_tests_nica

build_tests_nica:c8:
  variables:
    OS_TYPE: "c8"
    REPORT_NAME: "report_c8"
  needs: ["build_nica:c8"]
  dependencies:
    - build_nica:c8
  retry: 1       # retry script if it failed (sometimes if fails due to some unexpected particle). Maximum 2 retries.
  <<: *build_tests_nica
